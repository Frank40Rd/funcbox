{-
    utils_test.fc 

    Tests for utils.fc
-}
;; uri: "test", description: "test test"
(cell) __test_dict_1() asm "B{b5ee9c724101050100620002012001030143bff872ebdb514d9c97c283b7f0ae5179029e2b6119c39462719e4f46ed8f7413e64002000a00746573740143bfe48237bd1bd68753e77399aacc27d2a144c17c59be47bde7648fbd638d3e688240040014007465737420746573749fc649ab} B>boc PUSHREF";
;; publicKey: "test", description: "test test"
(cell) __test_dict_2() asm "B{b5ee9c724101050100620002012001030143bff0f96020ea74f07aac572f746b56db173cdd66722df3685b685df44a3faf86ecc002000a00746573740143bfe48237bd1bd68753e77399aacc27d2a144c17c59be47bde7648fbd638d3e68824004001400746573742074657374573cb0d0} B>boc PUSHREF";
;; uri: "test", publicKey: "test", description: "test test"
(cell) __test_dict_3() asm "B{b5ee9c7241010701008a00020120010502016e02030141bf07cb010753a783d562b97ba35ab6d8b9e6eb33916f9b42db42efa251fd7c3766040141bf03975eda8a6ce4be141dbf85728bc814f15b08ce1ca3138cf27a376c7ba09f3204000a00746573740143bfe48237bd1bd68753e77399aacc27d2a144c17c59be47bde7648fbd638d3e688240060014007465737420746573746f198f43} B>boc PUSHREF";
;; symbol: "TST", decimals: "12"
(cell) __test_dict_4() asm "B{b5ee9c724101050100580002015801030142bfb76a7ca153c24671658335bbd08946350ffc621fa1c516e7123095d4ffd5c581020008005453540142bfae80fd2f1e03480e2282363596ee752d7bb27f50776b95086a0279189675923e040006003132cb541380} B>boc PUSHREF";

_ test_utils::address_to_hex_string() impure inline {
    assert("address_to_hex_string #0", equal_slices(utils::address_to_hex_string(0), "0000000000000000000000000000000000000000000000000000000000000000"));
}

_ test_utils::number_to_slice() impure inline {
    assert("number_to_slice #0", equal_slices(utils::number_to_slice(0), "0"));
    assert("number_to_slice #1", equal_slices(utils::number_to_slice(10), "10"));
    assert("number_to_slice #2", equal_slices(utils::number_to_slice(-10), "-10"));
}

_ test_utils::merge_dicts() impure inline {
    cell dict1 = __test_dict_1();
    cell dict2 = __test_dict_2();
    cell dict3 = __test_dict_3();
    cell dict4 = __test_dict_4();

    assert("merge_dicts #0", equal_cells(utils::merge_dicts(dict1, dict1, 256), dict1));
    assert("merge_dicts #1", equal_cells(utils::merge_dicts(dict1, dict2, 256), dict3));
    assert("merge_dicts #2", equal_cells(utils::merge_dicts(dict3, dict1, 256), dict3));
    assert("merge_dicts #3", ~ equal_cells(utils::merge_dicts(dict1, dict2, 256), dict4));
    assert("merge_dicts #4", ~ equal_cells(utils::merge_dicts(dict4, dict2, 256), dict4));
}

_ test_utils() impure inline_ref {
    test_utils::address_to_hex_string();
    test_utils::number_to_slice(); 
    test_utils::merge_dicts();
}